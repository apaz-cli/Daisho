
ctype Bool bool;

trait Boolable {
  Bool to_bool();
  Bool !(Self other) self.to_bool()!`;
  Self ?:(Self other) (self.to_bool() ? self : other)`;
};

template<T>
type Optional impl Boolable {
    T t;
    Bool present;
    Bool to_bool() self.present`;
};

template<T>
trait Iterable<T> {
    Optional<T> next();
};

trait Integer impl Boolable {
    Self  +(Self other);
    Self  -(Self other);
    Self  *(Self other);
    Self  /(Self other);
    Self  %(Self other);
    Self  <(Self other);
    Self  >(Self other);
    Self <=(Self other);
    Self >=(Self other);
    Self  ~(Self other);

    Self ++() self` also self$ = self$ + 1;
    Self --() self` also self$ = self$ - 1;
};

template<T>
trait Floating {
    
};