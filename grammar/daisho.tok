
///////////////
// Operators //
///////////////

// Note: << and >> are handled in the parser.
PLUS:   "+";
MINUS:  "-";
MUL:    "*";
DIV:    "/";
MOD:    "%";
AND:    "&";
OR:     "|";
XOR:    "^";
NOT:    "!";
BITNOT: "~";
LOGAND: "&&";
LOGOR:  "||";

DEQ:    "==";
NEQ:    "!=";
LT:     "<";
LEQ:    "<=";
GT:     ">";
GEQ:    ">=";

EQ:     "=";
PLEQ:   "+=";
MINEQ:  "-=";
MULEQ:  "*=";
DIVEQ:  "/=";
MODEQ:  "%=";
ANDEQ:  "&=";
OREQ:   "|=";
XOREQ:  "^=";
BNEQ:   "~=";
BSREQ:  ">>=";
BSLEQ:  "<<=";

INCR:   "++";
DECR:   "--";
ELVIS:  "?:";
QUEST:  "?";
COLON:  ":";


//////////////////
// Control Flow //
//////////////////
IF: "if";
ELSE: "else";
WHILE: "while";
DO: "do";
THEN: "then";
ALSO: "also";


/////////
// OOP //
/////////

CLASS: "class";
TRAIT: "trait";
DYN:   "dyn";
CTYPE: "ctype";


/////////////////
// Misc Syntax //
/////////////////

SEMI:   ";";
DOT:    ".";
COMMA:  ",";
OPEN:   "(";
CLOSE:  ")";
HASH:   "#";
DOLLAR: "$";
AT:     "@";
GRAVE:  "`";


///////////////////////
// Abbreviated Words //
///////////////////////

// ret(urn)?
RET: (3, 6) {
  (0, 'r') -> 1;
  (1, 'e') -> 2;
  (2, 't') -> 3;
  (3, 'u') -> 4;
  (4, 'r') -> 5;
  (5, 'n') -> 6;
};

// impl([ei]ments)?
IMPL:  (4, 10) {
  (0, 'i') -> 1;
  (1, 'm') -> 2;
  (2, 'p') -> 3;
  (3, 'l') -> 4;
  (4, 'e') -> 5;
  (4, 'i') -> 5;
  (5, 'm') -> 6;
  (6, 'e') -> 7;
  (7, 'n') -> 8;
  (8, 't') -> 9;
  (9, 's') -> 10;
};

// op(erator)?
OP: (2, 8) {
  (0, 'o') -> 1;
  (1, 'p') -> 2;
  (2, 'e') -> 3;
  (3, 'r') -> 4;
  (4, 'a') -> 5;
  (5, 't') -> 6;
  (6, 'o') -> 7;
  (7, 'r') -> 8;
};


/////////////////////////
// Numbers and Strings //
/////////////////////////

IDENT: (1, 2) {
  (0, [_a-zA-Zα-ωΑ-Ω]) -> 1;
  ((1, 2), [_a-zA-Zα-ωΑ-Ω0-9]) -> 2;
};

// [-+]?[0-9]+
NUM: 2 {
  (0, [-+]) -> 1;
  ((0, 1, 2), [0-9]) -> 2;
};

// ["]([^"\n\\]|\\[nfbrte\\'"])*["]
STRLIT: 2 {
  (0, ["])  -> 1;
  (1, ["])  -> 2;
  (1, [\n]) -> 9; // no newlines in string.
  (1, [\\]) -> 3; // start parsing escape sequence
  (1, [^])  -> 1; // string content
  (3, [n])  -> 1; // newline
  (3, [f])  -> 1; // form feed
  (3, [b])  -> 1; // backspace
  (3, [r])  -> 1; // carriage return
  (3, [t])  -> 1; // tab
  (3, [e])  -> 1; // escape character
  (3, [\\]) -> 1; // backslash
  (3, ['])  -> 1; // single quote
  (3, ["])  -> 1; // double quote
};


///////////////////////////////////////
// Whitespace, Comments, and Shebang //
///////////////////////////////////////

// [\ \n\r\t]+
WS: 1 {
  ((0, 1), [ \n\r\t]) -> 1;
};

// \/\*([^*]*\*)*\/
MLCOM: 4 {
  (0, '/') -> 1;
  (1, '*') -> 2;
  (2, '*') -> 3;
  (2, [^]) -> 2;
  (3, '*') -> 3;
  (3, '/') -> 4;
  (3, [^]) -> 2;
};

// \/\/[^\n]*
SLCOM: (2, 3) {
  (0, '/') -> 1;
  (1, '/') -> 2;
  (2, [^\n]) -> 2;
  (2, [\n]) -> 3;
};

// #![^\n]*[\n]
SHEBANG: 3 {
  (0, '#') -> 1;
  (1, '!') -> 2;
  (2, [^\n]) -> 2;
  (2, [\n]) -> 3;
};
