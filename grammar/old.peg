%prefix "sp"
%value "NTYPE"
%header {
typedef void* NTYPE;
}

##########################
# TOP LEVEL DECLARATIONS #
##########################

CompilationUnit <- _ (TopLevelDeclaration)+ _ !.

TopLevelDeclaration <-
    _ /
    GlobalVariableDeclaration /
    FunctionDeclaration /
    ClassDeclaration /
    TraitDeclaration /
    TraitImplementation /
    CTypeDeclaration /
    CFlagDeclaration /
    ImportStatement

#####################
# Class Declaration #
#####################

ClassMember <- _

TraitConstraint <-  ("impl" _ traittype:STypeIdent _ constraint:WhereConstraint?)?
WhereConstraint <-  ("where" _ specified:STypeIdent _ "impl" _ impltype:TraitList)?
TraitList <- STypeIdent

ClassDeclaration <-
    "class" _ classtype:STypeIdent _ constraint:TraitConstraint? _ "{"
        _ ClassMember* _
    "}" _ ";"?

GlobalVariableDeclaration <- "A"
FunctionDeclaration <- "F"
TraitDeclaration <- "trait" SIdent ";"
TraitImplementation <- "impl" _ traittype:STypeIdent _ "for" _ ontype:STypeIdent _ "where"
CTypeDeclaration <- "ctype" _ CTypeIdent _ ";"
CFlagDeclaration <- "cflag" _ StringLiteral _ ";"
CTBindDeclaration <- "tbind" _ ";"
CFBindDeclaration <- "fbind" _ ";"
ImportStatement <- ("import" / "include") _ StringLiteral _ ";"



##############
# Statements #
##############

Statement <-
    ";" /
    Expr /
    BlockStatement /
    IfStatement /
    ElseStatement /
    ForStatement /
    WhileStatement /
    ReturnStatement

BlockStatement <- "{" _ Statement* _ "}"
IfStatement <- "if"
ElseStatement <- "else"
ForStatement <- "for"
WhileStatement <- "while" _ "(" _ Expr _ "}" _
ReturnStatement <- _ ("return" / "ret") _ Expr _ ";" _

###############
# Expressions #
###############

Expr <- "expr"


###############
# Identifiers #
###############

SIdent <- <([_a-zA-Z] / GreekChar)([_a-zA-Z0-9] / GreekChar)+> {}
STypeIdent <- <[_A-Z][_a-zA-Z0-9]+> 
SType <- STypeIdent postfix:STypePostfix+
STypePostfix <- "*" / "[]" / "<" SType ">"

CTypeIdent <- [_a-zA-Z][_a-zA-Z0-9]+ "*"*


############
# Literals #
############

# Number fragments
#DecimalNumeral <- [+-]? [0-9]+

# Hex fragments
#HexNumeral <- "0x" [0-9A-F]+

# String fragments TODO: refine ~["\\\r\n]
SCharFrag <- '"' SChar+ '"'
SChar <- ([^"\\\r\n] / EscapeSequence)
EscapeSequence <- "\\" ['"?abfnrtv\\] / "\\x" [0-9A-F]+

# Literal definitions
#IntegerLiteral <- DecimalNumeral [Ll]? /  HexNumeral
#FloatLiteral   <- DecimalNumeral / DecimalNumeral "." DecimalNumeral?
#NullLiteral    <- "NULL" / "null"

#CharacterLiteral <- "'" SChar "'" / "\"" SChar "\""
StringLiteral <- SCharFrag+


##################
# Character Sets #
##################

GreekChar <- [αβγδεζηθικλμνξοπρσςτυφχψωΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩ]


######################
# Ignored Characters #
######################

# Form feed is a thing but meh
_ <- (WS / ML_COMMENT / SL_COMMENT)*
WS <- [ \t\r\n]+
ML_COMMENT <- "/*" (.*)? "*/"
SL_COMMENT <- "//" [^\n]*


%%
/*
int main() {
    sp_context_t *ctx = sp_create(NULL);
    while (sp_parse(ctx, NULL));
    sp_destroy(ctx);
    return 0;
}*/
